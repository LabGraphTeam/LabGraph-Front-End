name: Frontend Deploy Pipeline

on:
  push:
    branches: ['main']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, linux, x64, frontend]
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Ensure buildx cache
        run: mkdir -p /tmp/.buildx-cache

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile', 'docker-compose.build.yml') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and push with buildx
        run: |
          docker system prune -f
          if docker buildx inspect builder >/dev/null 2>&1; then
            docker buildx rm builder || true
          fi
          docker buildx create --use --name builder
          docker buildx build \
            --file Dockerfile \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache,mode=max \
            --pull \
            --push \
            -t leonardomeireles55/quality-lab-pro-front-end:latest .

  deploy:
    needs: build
    runs-on: [self-hosted, linux, x64, frontend]
    environment: Production
    steps:
      - uses: actions/checkout@v4

      - name: Deploy application
        run: |
          docker compose pull
          docker compose up -d

      - name: Deployment notification
        run: echo "âœ… Deployment completed"

  health-check:
    runs-on: [self-hosted, linux, x64, backend]
    needs: deploy
    timeout-minutes: 5
    steps:
      - name: Health check with timeout and retry
        run: |
          max_attempts=12
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            if curl -sSf https://lab-spec.systems/api/health-check; then
              echo "âœ… Service is healthy!"
              exit 0
            fi
            echo "Attempt $attempt/$max_attempts - Service not healthy yet..."
            sleep 15
            attempt=$((attempt + 1))
          done
          echo "Health check failed after $max_attempts attempts"
          exit 1

      - name: Final status
        if: success()
        run: echo "ðŸš€ Application is running successfully in production"

  cleanup:
    runs-on: [self-hosted, linux, x64, frontend]
    needs: health-check
    if: always()

    steps:
      - uses: actions/checkout@v4
      - name: Running cleanup script
        run: |
          chmod +x ./.github/scripts/cleanup_system.sh
          ./.github/scripts/cleanup_system.sh
